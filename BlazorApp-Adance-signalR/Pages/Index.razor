@page "/"
@using BlazorApp_Adance_signalR.Data;
@using BlazorApp_Adance_signalR.Hubs;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Net;

@*@inject IHubContext<ChatHub, IChatHub> hub*@
@inject NavigationManager Navigation


<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<button class="btn btn-primary" @onclick="(async()=>await SendTest())">Send test message</button>

<SurveyPrompt Title="How is Blazor working for you?" />


@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {

        var cookieContainer = new CookieContainer();

        var cookie = new Cookie()
            {
                Name = ".aspnetcore.identity.application",
                Domain = "localhost",
                Value = CookieProvider.Cookie
            };
        cookieContainer.Add(cookie);

        hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/chat"), options =>
                {
                    options.Cookies = cookieContainer;

                    options.HttpMessageHandlerFactory = (msg) =>
                    {
                        if (msg is HttpClientHandler clientHandler)
                        {
                            // bypass SSL certificate
                            clientHandler.ServerCertificateCustomValidationCallback +=
                            (sender, certificate, chain, sslPolicyErrors) => { return true; };
                        }

                        return msg;
                    };
                })
                .WithAutomaticReconnect()
                .Build();

        hubConnection.On<Message>("Notification", (msg) =>
        {
            Console.WriteLine("message recived" + msg);
        });

        await hubConnection.StartAsync();
    }

    async ValueTask SendTest()
    {
        var authenticateState = await authenticationStateTask!;


        var message = new Message()
            {
                SenderId = authenticateState?.User?.Identity?.Name,
                UserId = "17mk@esisalama.org",
                Content = "Test",
                Id = Guid.NewGuid()
            };


        await hubConnection.SendAsync("MessageThem", message);

        //await hub.Clients.User(message.UserId).Notification(message);
    }
}